%% loop
function [dataalm] = UHEAL_clin_scraper(subid,datadir)
% This FUNCTION scrapes, amalgamates, and saves the appropriate information
% from the various data files generated by the UHEAL test battery.

% Sam Watson sadaw@dtu.dk
% modified by Jonatan Märcher-Rørsted for parrallel processing
% jonmarc@dtu.dk

% 22/06/2020 - function created
% 01/09/2020 - improved error reporting and error catching
% 12/11/2020 - added extra struct layer 'dataalm.id' to store UHEAL number
%              even if file is anonymised (data.alm deleted)

% Jonatan Marcher-R?rsted (jonmarc@dtu.dk)
% 17/05/2021 - added extraction of NESI, SSQ12, TTS and ACALOS + EEG lab
% and age
% 2/2/2023   - Par processing for HPC


%% Dependencies:
% You also need the sub functions available:
% scrapeAud.m
% scrapeTEOAE.m
% xml2struct.m - Available on MATHWORKS
% get_acalos_raw.m

%% WARNING %%
%This script does not anonymise the data! Personally identifyable
%information available from the Otoaccess database (doesn't include CPR) is
%saved as part of the output (In the 'per' sub-struct).
%%% -> Only save the input and output of files on DTU work storage. %%%

%To anonymise the data, simply delete the 'dataalm.per' struct layer from
%each ouput file. The UHEAL identifying number is saved also as a separate
%struct layer (dataalm.id). -> BUT IS BADED ON THE FOLDER NAME

%% USAGE
%Identify the data folder below as the 'datafol' variable as acomplete
%filepath string (or if this file is being used as a function, the file
%path is read in as an input).

%'datafol' should contain separate unique folders, each containing all the
%data files associated to a single UHEAL pipeline session (aka. usually a
%single subject). The flders should be named as you wish to identify the
%subjects (their Ottoaccess identifyer is also saved in the output).

% There should not be any other folders in the directory.

% Each subject folder should contain 9 files (10 if you did L&R MEMER):
%
% 1) ACALOS results .dat file(s) in a BEARResults_.../ACALOS folder (BEAR test battery: exporting results will export ALL results ever made to separate .dat files)
% 2) MEMR results .mat file (x2 if left & right)
% 3) audiometry results .xml file (exported from Diagnostic suite)
% 4) teoae results .xml file (exported from the Titan teoae module)
% 5) EEG data .bdf file (saved from the Phys REC PC, Biosemi Actiview)
% 6) Reverse digit span test results (.mat)
% 7) x3 Stimulus .mat file (one each for AEP, ABR, and FFR)
% 8) NESI and SSQ xl files

% The OUTPUT will be a single mat file per subject/session in the same
% directory as the subject folders, named as the subject folders are. The
% output .mat contains a struct 'dataalm' which houses the data:

% dataalm.id - UHEAL number taken audiogram (otoacces subject ID)
% dataalm.per - personal information (name, age...)!
% dataalm.aud - audiogram data, L&R, normal freq + extended freq
% dataalm.teoae - TEOAE data, L&R
% dataalm.memr - MEMR data (possibly L&R)
% dataalm.acalos - ACALOS results
% dataalm.eeg - .BDF EEG data
% dataalm.rds - Reverse Digit Span data
% dataalm.stim - Stimulus details for each of the 3 EEG tests
% dataalm.nesi - NESI results (exposure score)
% dataalm.tts - TTS score
% dataalm.ssq - SSQ 12 results

    fprintf('Extracting data from: %s \n',subid)
    
    
    %reset in-folder flags
    errors = {};
    checkPER = 0;
    checkAUD = 0;
    checkTEOAE = 0;
    checkEEG = 0;
    checkACALOS_raw = 0;
    checkACALOS_proc = 0;
    checkMEMRL = 0;
    checkMEMRR = 0;
    checkRDS = 0;
    checkSSQ = 0;
    checkNESI = 0;
    
    checkSTIMaep = 0;
    checkSTIMabr = 0;
    checkSTIMffr = 0;
        
    %extract lists of filetypes
    contX = dir(fullfile([datadir filesep subid filesep '*.xml']));
    contM = dir(fullfile([datadir filesep subid filesep '*.mat']));
    contB = dir(fullfile([datadir filesep subid filesep '*.bdf']));
    %new 17/05/21
    contD = dir(fullfile([datadir filesep subid filesep '*.dat']));
    contXl=dir(fullfile([datadir filesep subid filesep '*.xlsx']));
    
    %check if folder continues valid data
    if size(contX,1)+size(contM,1)+size(contB,1)+size(contD,1)+size(contXl,1) == 0 
        warning('Folder: %s appears to have no data files in it. Skipping it!',subid)
        errors = [errors;['Folder "' subid, '" was empty of recognised data files']];


        
    elseif size(contX,1)+size(contM,1)+size(contB,1)size(contXl,1)+size(contD,1) < 11
        warning('Some files might be missing from folder %s', subid)
        errors = [errors;[subid, ' has fewer than the expected 11 various data files']];
        
    end
    
    %initiate the struct that will be saved as this folders almalgamated .mat
    %data file
    dataalm = struct();

    % define subject name here
    dataalm.id = subid;
    dataalm.per = [];
    dataalm.aud = [];
    dataalm.teoae = [];
    dataalm.memr = [];
    dataalm.acalos = [];
    dataalm.rds = [];
    %new by cs
    dataalm.nesi=[];
    dataalm.ssq=[];
    dataalm.tts=[];
    % EEG
    dataalm.eeg = [];
    dataalm.stim.aep = [];
    dataalm.stim.abr = [];
    dataalm.stim.ffr = [];
    
    %% begin processing of xml files
    fprintf('Processing .xml files.\nFound %d: \n', size(contX,1))
    
    if size(contX,1) > 2
       warning('More than two .xml files detected!\n')
       errors = [errors;[subid, ' has more than 2 .xml files in it.']];
    end        
        
    if isempty(contX) %if NO .xml files exist
        warning('No .xml exist in folder: %s \n', subid)
        errors = [errors;[subid, ' has no .xml files in it.']];
    end
    
    if ~isempty(contX) %if some .xml files exist
        
        namesX= {contX.name}';
        fprintf(1, '%s \n', namesX{:})
        
        for j = 1:size(contX,1)
            tmp = xml2struct([contX(j).folder filesep contX(j).name]); %load in the first .xml file
            xmltype = tmp.SaData.Session.Module.Text;
            fprintf('File "%s" identifies itself as: %s \n',contX(j).name, xmltype)

            switch xmltype
                case 'AUD'
                    if checkAUD == 1
                        warning('An audiogram file was already read in from this folder. Additional ones are ignored.\n')
                        errors = [errors;[subid, ' has more than one audiogram file in it.']];
                        continue; %therefore ship this file as first come fist served
                    end                
                    checkAUD = 1; %flag to indicate an audiogram .xml has already been read in 
                    fprintf('Audiogram file. \n')

                    %personal information is coppied across from the audiogram
                    %struct
                    dataalm.id = subid;
                    dataalm.per = tmp.SaData.ClientInfo; %(creationDate field doesnt seems to work) % sensitive data
                    dataalm.per.AUDdate = tmp.SaData.Session.Created.Text; % add date and time of audiogram
                    dataalm.per.PersonNumber = subid; %fill in unused struct field with folder name to record which UHEAL participant number the data is for
                    checkPER = 1;

                    %call function to organise and process audiogram data
                    [dataalm.aud, errorAUD] = scrapeAUD(tmp);
                    

                    fprintf('Saved\n')
                    
                    for n = 1:size(errorAUD,1)
                        errors = [errors;[contX(j).name ,' in ' ,subid, errorAUD{n,1}]];                    
                    end



                case 'TEOAE'
                    if checkTEOAE == 1
                        warning('A TEOAE  file was already read in from this folder. Additional ones are ignored.\n')
                        errors = [errors;[subid, ' has more than one TEOAE file in it.']];
                        continue; %Therefore skip this file as first come first served
                    end   
                    checkTEOAE = 1; %flag to indicate an teoae .xml has already been read in 
                    fprintf('TEOAE file.\n')

                    %call function to organise and process TEOAE data
                    dataalm.teoae = scrapeTEOAE(tmp);
                    
                    %check if any data was missing by searching for any
                    %remining NaNs in the saved data
                    if any([squeeze(any(any(isnan(dataalm.teoae{1}))))',any(isnan(dataalm.teoae{2})),any(isnan(dataalm.teoae{3}))])
                        warning('Some TEOAE  data is missing from file "%s" in folder %s.\n', contX(j).name, subid)
                        errors = [errors;[contX(j).name,' in ',subid, ' is missing data.']];
                    end
                    
                    fprintf('Saved\n')

                otherwise
                    warning('.xml file titled %s identifies itself as %s. Expected identifiers should be AUD or TEOAE.\n', Xcont(j).name, xmltype)
                    warning('this file will be skipped.\n')
                    errors = [errors;[contX(j).name, ' in folder ', subid, 'was skipped.']];


            end
        end
    end
    %% NEW - begin processing xlsx files (NESI and SSQ12)
    
    fprintf('Processing .xlsx files.\nFound %d: \n', size(contXl,1))
    
    if size(contXl,1) > 2
       warning('More than two .xlsx files detected!\n')
       errors = [errors;[subid, ' has more than 2 .xlsx files in it.']];
    end        
        
    if isempty(contXl) %if NO .xlsx files exist
        warning('No .xlsx exist in folder: %s \n', subid)
        errors = [errors;[subid, ' has no .xlsx files in it.']];
    end
    
    if ~isempty(contXl) %if some .xlsx files exist
        
        namesXl= {contXl.name}';
        fprintf(1, '%s \n', namesXl{:})
        
        for j = 1:size(contXl,1)


            switch contXl(j).name(1:2)
                case 'NE'

                    tmp = xlsread([contXl(j).folder filesep contXl(j).name],1,'C38:C39'); % load/read the xlsx file
                    % NESI total noise unit score
                    dataalm.nesi = tmp(1);
                    % TTS score
                    dataalm.tts = tmp(2);
                    checkNESI = 1; %flag to indicate an NESI has already been read in
                case 'SS'
                    tmp = xlsread([contXl(j).folder filesep contXl(j).name]);
                    % SSQ score 1-12
                    dataalm.ssq = tmp;
                    checkSSQ = 1; %flag to indicate an SSQ12 has already been read in
            end
        end
    end
    
    
    %% save name of EEG .bdf file for calling into FieldTrip
    
    fprintf('Processing .bdf files.\nFound %d: \n', size(contB,1))
    
     if size(contB,1) > 1
                    warning('Multiple EEG files found. All names of them are saved')
                    errors = [errors;[subid, ' has more than one EEG file in it.']];
                    
     elseif isempty(contB)
         warning('No EEG files found!')
         errors = [errors;[subid, ' has no EEG file in it.']];
     end  
    
    if ~isempty(contB) %if some .bdf files exist
        dataalm.eeg = {contB(:).name}; %save their names as cell array for import to FieldTrip
        fprintf('Saved\n')
        checkEEG = 1;
    end
    
    %% begin processing .mat files
    fprintf('Processing .mat files.\nFound %d: \n', size(contM,1))
    
     if size(contM,1) > 7
                    warning('More than 7 Matlab data files found in %s, extras are ignored.', subid)
                    warning('MEMR files properly named ending as "_L" or "_R" will take precidence.')
                    errors = [errors;[subid, ' has more than 7 .mat files in it.']];
                    
             %Only the first ACALOS file is read in and saved
             %ALL MEMR files are read in and saved, unless a confirmed named L and R file are found,
             %then others are ignored!
             %The 'stim' file is simply read in and the struct coped into
             %the amalgamated storage struct.
                    
     elseif isempty(contM)
         warning('No matlab files found.')
         errors = [errors;[subid, ' has no matlab files in it.']];
     end  
    
     if ~isempty(contM) %if some .mat files exist
        
          for j = 1:size(contM,1)
               tmp = load([contM(j).folder filesep contM(j).name]); %load in the first .mat file
               
               %use field names to check what kind of data file this is
               fields = sort(fieldnames(tmp));
               %the known structure an ACALOS, MEMR, or RDS data struct takes

               fieldsMEMR = {'data'};
               fieldsRDS = {'score'};
               
               fieldsSTIMaep = sort({'targetlevel';'fs';'dur';'isi';'Ntrials';'isi_cond';'trigval';'id';'ons'});
               fieldsSTIMabr = sort({'stimtype';'polarity';'ear';'rate';'targetlevel';'noise';'noiselevel';'abr_stim';'trigger';'time';'trigval';'conds';'dat';'experiment_time'});
               fieldsSTIMffr = sort({'fc';'polarity';'noise';'modf';'ear';'targetlevel';'tones';'trigger';'time';'trigval';'conds';'experiment_time';'dat'});
               
               
                   
               
               if isequal(fields, fieldsMEMR)
                   %found to be an MEMR data .mat
                   fprintf('Found a MEMR data file.\n')
                   %attempt to distinguish L & R measurement
                   %if MEMR file was saved following naming protocol, should end in '_L' or '_R'
                   if strcmp(contM(j).name(end-5:end-4),'_L') && ~checkMEMRL
                        fprintf('File name indicated it is left ear data.\n')
                        dataalm.memr.L = tmp.data;
                        fprintf('Saved\n')
                        checkMEMRL = 1;
                   elseif strcmp(contM(j).name(end-5:end-4),'_R') && ~checkMEMRR
                        fprintf('File named indicated it is right ear data.\n')
                        dataalm.memr.R = tmp.data;
                        fprintf('Saved\n')
                        checkMEMRR = 1;
                   elseif ~checkMEMRL || ~checkMEMRR %in the case the naming convention was not followed, and either a confirmed L/R MEMR file is not found yet
                       dataalm.memr.unidentified = []; 
                       dataalm.memr.unidentified = [dataalm.memr.unidentified,tmp.data];
                        warning('%s in %s was not named identifying if it was L/R. Saved under field "unidentified".', contM(j).name, subid) 
                        errors = [errors;[contM(j).name,' in ',subid, ' was not identified as L/R. Saved simply in a numbered cell under field "unidentified".\n']];
                   elseif checkMEMRL && checkMEMRR %If a confirmed both L and R MEMR files were already read in and saved.
                        warning('%s in %s was not saved and L & R files were already found.', contM(j).name, subid) 
                        errors = [errors;[contM(j).name,' in ',subid, ' was not saved as named L & R files were already found.']];
                   end                 
                   
                   
               elseif isequal(fields, fieldsRDS)
                   %found to be a RDS data .mat
                   fprintf('Found a RDS data file.\n')
                   if checkRDS == 1
                        warning('An RDS file was already read in from this folder. Additional ones are ignored.')
                        errors = [errors;[subid, ' has more than one RDS file in it. Extras are ignored.']];
                        
                   elseif checkRDS == 0
                       %copy in data
                       fprintf('Saved\n')
                       dataalm.rds = tmp.score; %copy STIM data to storage struct
                       checkRDS = 1;
                   end
                   
               elseif isequal(fields, {'stim'}) %see if it's a stim.mat file
                    fields = sort(fieldnames(tmp.stim)); %take a look at the struct within 'stim' to see what kind
                   
                if isequal(fields, fieldsSTIMaep)
                     %found to be a STIM data .mat
                   fprintf('Found a STIM aep data file.\n')
                   if checkSTIMaep == 1
                        warning('An STIM aep file was already read in from this folder. Additional ones are ignored.')
                        errors = [errors;[subid, ' has more than one STIM aep file in it. Extras are ignored.']];

                   elseif checkSTIMaep == 0
                       %copy in data
                       fprintf('Saved\n')
                       dataalm.stim.aep = tmp.stim; %copy STIM data to storage struct
                       checkSTIMaep = 1;
                   end  
                   
                elseif isequal(fields, fieldsSTIMabr)
                     %found to be a STIM data .mat
                   fprintf('Found a STIM abr data file.\n')
                   if checkSTIMabr == 1
                        warning('An STIM abr file was already read in from this folder. Additional ones are ignored.')
                        errors = [errors;[subid, ' has more than one STIM abr file in it. Extras are ignored.']];

                   elseif checkSTIMabr == 0
                       %copy in data
                       fprintf('Saved\n')
                       dataalm.stim.abr = tmp.stim; %copy STIM data to storage struct
                       checkSTIMabr = 1;
                   end  
                   
                elseif isequal(fields, fieldsSTIMffr)
                     %found to be a STIM data .mat
                   fprintf('Found a STIM ffr data file.\n')
                   if checkSTIMffr == 1
                        warning('An STIM ffr file was already read in from this folder. Additional ones are ignored.')
                        errors = [errors;[subid, ' has more than one STIM ffr file in it. Extras are ignored.']];

                   elseif checkSTIMffr == 0
                       %copy in data
                       fprintf('Saved\n')
                       dataalm.stim.ffr = tmp.stim; %copy STIM data to storage struct
                       checkSTIMffr = 1;
                   end
                end
                   
               else
                   warning('%s in %s was not identified as either a ACALOS, MEMR, RDS, or STIM data file based on contained field names. Skipped!', contM(j).name, subid) 
                   errors = [errors;[contM(j).name,' in ',subid, ' was not identified as either a ACALOS, MEMR, RDS, or STIM data file. It was skipped.']];
                   
               end
          end
        
        if isfield(dataalm.memr,'unidentified') && checkMEMRL && checkMEMRR %if after all .mat files were read, two confirmed named L & R MEMR files were found, delete the unidentified ones.
            dataalm.memr = rmfield(dataalm.memr,'unidentified');
        end
              
          
     end
    

    

    %% begin processing .dat files (ACALOS)
    fprintf('Processing .dat files.\nFound %d: \n', size(contD,1))
    if strcmp(dataalm.id,'UH096') % wrong data for this subject
        dataalm.acalos = [];
    else
     if size(contD,1) > 2
                    warning('More than 2 dat data files found in %s, extras are ignored.', subid)
                    
                    errors = [errors;[subid, ' has more than 2 .dat files in it.']];
                    
             %Only the first 2 ACALOS files are read in and saved

                    
     elseif isempty(contD)
         warning('No dat files found.')
         errors = [errors;[subid, ' has no dat files in it.']];
     end  
    
     if ~isempty(contD) %if some .dat files exist
         for j = 1:size(contD,1)
               tmp_dat = importdata([contD(j).folder filesep contD(j).name]); %load in the first .mat file
               tmp = tmp_dat.data;
               
               %use field names to check what kind of data file this is
               dim = size(tmp);
               %the known structure an ACALOS

               fieldsACALOS_raw = 3; % is raw data
               fieldsACALOS_proc = 5;% is processed data
               
               
               if isequal(dim(2), fieldsACALOS_raw)
                   %found to be an ACALOS data .mat
                   fprintf('Found an ACALOS raw data file.\n')
                   if checkACALOS_raw == 1
                        warning('An ACALOS file was already read in from this folder. Additional ones are ignored.')
                        errors = [errors;[subid, ' has more than one ACALOS file in it. Extras are ignored.']];
                        
                   elseif checkACALOS_raw == 0
                       %copy in data
                       acalos_results=get_acalos_raw(tmp);
                       fprintf('Saved\n')
                       dataalm.acalos.raw = acalos_results; %copy acalos data to storage struct
                       checkACALOS_raw = 1;
                   end
                   
                   
               elseif isequal(dim(2), fieldsACALOS_proc)
                   if checkACALOS_proc == 1
                       warning('An ACALOS file was already read in from this folder. Additional ones are ignored.')
                       errors = [errors;[subid, ' has more than one ACALOS file in it. Extras are ignored.']];
                       
                   elseif checkACALOS_proc == 0
                       %copy in data
                       %acalos_results=get_acalos_raw(tmp);
                       filename = [contD(j).folder filesep contD(j).name];
                       delimiter = ' ';
                       startRow = 2;              
                       formatSpec = '%f%f%f%f%f%s%s%[^\n\r]';                       
                       fileID = fopen(filename,'r');                       
                       dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');                      
                       fclose(fileID);
                       
                       acalosproc = table(dataArray{1:end-1}, 'VariableNames', {'VarName1','track','exppar1Hz','lcutdB','HL','mlowCUdB','mhighCUdB'});
                       
                       clearvars filename delimiter startRow formatSpec fileID dataArray ans;

                       fprintf('Saved\n')
                       dataalm.acalos.proc = acalosproc; %copy acalos data to storage struct
                       checkACALOS_proc = 1;
                   end
               else
                   warning('%s in %s was not identified as either a ACALOS, MEMR, RDS, or STIM data file based on contained field names. Skipped!', contM(j).name, subid)
                   errors = [errors;[contM(j).name,' in ',subid, ' was not identified as either a ACALOS, MEMR, RDS, or STIM data file. It was skipped.']];
                   
               end
          end
           
    
     end
    end

     %% Get age and gender - jonmarc 2022
     
     if strcmp(dataalm.id,'UH022')
         age = 23;
         gender = 1;
     elseif strcmp(dataalm.id,'UH033')
         age = 19;
         gender = 1;
     elseif strcmp(dataalm.id,'UH106')
         age = 51;
         gender = 1;
     elseif strcmp(dataalm.id,'UH091')
         age = 19;
         gender = 2;         
     elseif ~isempty(dataalm.aud)
         [age,~,~,~,gender] = get_aud(dataalm);
     else
         age = []; gender = [];
     end
     
     dataalm.subinfo.age = age;
     dataalm.subinfo.gender = gender; % 1=female, 2=male
     % modification 29/9/24 to remove sensitive data from
     % remove sensitive info from struct                     
     dataalm = rmfield(dataalm,'per');
     load(fullfile([datadir filesep subid filesep 'aud.mat']));
     dataalm.aud = aud;
     load(fullfile([datadir filesep subid filesep 'subinfo.mat']));
     dataalm.subinfo = subinfo;
    

    %% get measurement place and CP

    
    fprintf('Folder %s was processed.\n The resulting data struct:\n', subid)
    disp(dataalm)
    %% get checks
    
    %check all data types were found and stored; warn otherwise
    checks = ~[1,checkPER,checkAUD,checkTEOAE,[checkMEMRL || checkMEMRR],[checkACALOS_raw && checkACALOS_proc],checkRDS,checkNESI,checkSSQ,1,checkEEG];
    fnames = fieldnames(dataalm);
    fnames = fnames(logical(checks));
    if ~isempty(fnames)
        fprintf(2,'Warning: Valid %s data is missing from folder %s. None was accepted and saved.\n\n',strjoin(fnames,' + '),subid)
        errors = [errors;[ 'No valid ',strjoin(fnames,' + ') ,' data was accepted and saved from ',subid]];
    end  
    dataalm.errors = errors;
fprintf('Scraping complete!\n')
    
end